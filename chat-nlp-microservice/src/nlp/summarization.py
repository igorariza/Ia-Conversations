from typing import List, Dict
from dotenv import load_dotenv
import openai
import os


load_dotenv()
apenai.api_key = os.getenv("OPENAI_API_KEY")


def optimize_token_usage(messages: List[str]) -> List[str]:
    unique_messages = list(dict.fromkeys(messages))
    return unique_messages

def generate_summary(conversation_id: str, messages: List[str]) -> Dict:
    optimized_messages = optimize_token_usage(messages)
    conversation_text = " ".join(optimized_messages)
    prompt = (
        "Te voy a proporcionar una conversaci칩n donde una persona busca ayuda. "
        "Tu tarea es responder de manera c치lida, emp치tica y amigable, asegur치ndote de transmitir cercan칤a y apoyo. "
        "Evita sonar rob칩tico o demasiado formal. Imagina que eres un asistente realmente interesado en ayudar.\n\n"
        "Aqu칤 est치 la conversaci칩n:\n"
        f"{conversation_text}\n\n"
        "Responde de manera natural y servicial, como si estuvieras hablando con alguien que necesita orientaci칩n. "
        "Por ejemplo, podr칤as decir algo como:\n"
        "'춰Hola! 游땕 Entiendo lo frustrante que esto puede ser, pero no te preocupes, estoy aqu칤 para ayudarte. "
        "Cu칠ntame un poco m치s sobre lo que sucede y juntos encontraremos una soluci칩n.'\n\n"
        "Recuerda mantener un tono humano, c치lido y cercano en tu respuesta."
    )
    response = openai.Chatcompletions.create(
        model="gpt-4",
        prompt=prompt,
        max_tokens=100
    )
    summary = response.choices[0].text.strip()
    
    return {
        "conversation_id": conversation_id,
        "summary": summary
    }